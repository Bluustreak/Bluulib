class triangle:
    def __init__(self, p1, p2, p3):
        self.x1, self.y1 = p1.x, p1.y
        self.x2, self.y2 = p2.x, p2.y
        self.x3, self.y3 = p3.x, p3.y
    def area(self):
        pass

class circle:
    def __init__(self, r):
        self.r = r
    def area(self):
        return np.power(self.r,2)*np.pi
    def circumference(self):
        return self.r * np.pi
    



def triangleAreaHeron(p1, p2, p3):
    #this uses Heron's formula for the area of a triangle which apparantly(?) is not always exact 
    a=distance2(p1.x, p1.y, p2.x, p2.y)
    b=distance2(p2.x, p2.y, p3.x, p3.y)
    c=distance2(p3.x, p3.y, p1.x, p1.y)
    s=(a+b+c)/2
    A=np.sqrt(s*(s-a)*(s-b)*(s-c))
    return A
def triangleAreaHeron_Nonumpy_withfunctions(p1, p2, p3):
    #this uses Heron's formula for the area of a triangle which apparantly(?) is not always exact 
    a=distance2NN(p2.x,p2.y,p1.x,p1.y)
    b=distance2NN(p2.x,p2.y,p3.x,p3.y)
    c=distance2NN(p3.x,p3.y,p1.x,p1.y)
    s=(a+b+c)/2
    A=np.sqrt(s*(s-a)*(s-b)*(s-c))
    return A
def triangleAreaHeron_Nonumpy_nofunctions(p1, p2, p3):
    #this uses Heron's formula for the area of a triangle which apparantly(?) is not always exact 
    a=math.sqrt((p2.x-p1.x)**2 + (p2.y-p1.y)**2)
    b=math.sqrt((p2.x-p3.x)**2 + (p2.y-p3.y)**2)
    c=math.sqrt((p3.x-p1.x)**2 + (p3.y-p1.y)**2)
    s=(a+b+c)/2
    A=np.sqrt(s*(s-a)*(s-b)*(s-c))
    return A

def triangleAreaBluu(p1, p2, p3):
    Ax=p1.x
    Ay=p1.y
    Bx=p2.x-Ax
    By=p2.y-Ay
    Cx=p3.x-Ax
    Cy=p3.y-Ay
    t1=Cx - (Cy * By**2 * Bx + Bx**2 * Cx * By)/(By**3 + By * Bx**2)
    t2=Cy - (Cx * Bx**2 * By + By**2 * Cy * Bx)/(Bx * By**2 + Bx**3)

    #H=np.sqrt(t1**2 + t2**2)
    H=math.sqrt(t1**2+t2**2)
    B=math.sqrt((Bx-Ax)**2 + (By-Ay)**2)

    #B=distance2(Ax,Ay,Bx,By)
    return (B*H)/2









    p1=Point2(0,0)
    p2=Point2(6,2)
    p3=Point2(3,4)

    print(triangleAreaBluu(p1, p2, p3))
    print(triangleAreaHeron(p1, p2, p3))

    iterations = 1000000
    t1A = time.time()
    for n in range(iterations):
        triangleAreaHeron(p1, p2, p3)
    dt1=time.time()-t1A
    print("time for 1e6 heron: ", dt1)

    t1B = time.time()
    for n in range(iterations):
        triangleAreaBluu(p1, p2 , p3)
    dt2=time.time()-t1B
    print("time for 1e6 bluu:  ", dt2)

    print("Bluu is ", int(100*(dt1/dt2-1)), "% faster")